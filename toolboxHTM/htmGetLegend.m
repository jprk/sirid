function [sfn, sfd, sfl, sfu, mp ] = vgsGetLegend ( type, lang, areaDescriptor )
% [N,D,F,U]=VGSGETLEGEND(T,LNG,AD) produces legend and field descriptions for output type T.
%
% (c) 2008 ÚTIA AVÈR, v.v.i.
%
% Author: Jan Pøikryl <prikryl@utia.cas.cz>
%
% Version: $Id: vgsGetLegend.m 2720 2010-07-13 18:47:58Z prikryl $
%

    % Check the number of input parameters
    if nargin < 2 || nargin > 3
        error ( 'vgs:argin', ...
            'This function accepts two or three parameters.' );
    end
    
    % Field names are the same for all languages
    statFieldNames = { ...
        'flow', ...
        'travelTimeAvg', 'travelTimeSdv', ...
        'delayTimeAvg',  'delayTimeSdv', ...
        'speedAvg',      'speedSdv', ...
        'density', ...
        'stopTimeAvg',   'stopTimeSdv', ...
        'numStops', ...
        'queueAvg', 'queueMax' };
    
    % English field descriptors and names
    if strcmp ( lang, 'en' )
        statFieldDesc = { ...
            'Vehicle flow', ...
            'Average travel time', 'Standard deviation of travel time', ...
            'Average delay time',  'Standard deviation of delay time', ...
            'Average speed',       'Standard deviation of speed', ...
            'Vehicle density', ...
            'Average stop time',   'Standard deviation of stop time', ...
            'Number of stops', ...
            'Average queue length', 'Maximum queue length' };
        statFieldYLabels = { ...
            'Vehicle flow ', ...
            'Average travel time ', '\sigma(travel time) ', ...
            'Average delay time ',  '\sigma(delay time) ', ...
            'Average speed ',    '\sigma(speed) ', ...
            'Vehicle density ', ...
            'Average stop time ',   '\sigma(stop time) ', ...
            'Number of stops ', ...
            'Average queue ', 'Maximum queue ' };
        statFieldUnits = { ...
            '[veh/h]', ...
            '[s]', '[s]', ...
            '[s]', '[s]', ...
            '[km/h]', '[km/h]', ...
            '[veh/km]', ...
            '[s]', '[s]', ...
            '[-]', ...
            '[veh]', '[veh]'
            };
    elseif strcmp ( lang, 'cs' )
        statFieldDesc = { ...
            'Tok vozidel', ...
            'Prùmìrná doba jízdy',     'Smìrodatná odchylka doby jízdy', ...
            'Prùmìrné zpoždìní',       'Smìrodatná odchylka zpoždìní', ...
            'Prùmìrná rychlost',       'Smìrodatná odchylka rychlosti', ...
            'Hustota vozidel', ...
            'Prùmìrná doba zastavení', 'Smìrodatná odchylka doby zastavení', ...
            'Poèet zastavení', ...
            'Prùmìrná délka fronty', 'Maximální délka fronty' };
        statFieldYLabels = { ...
            'Tok vozidel ', ...
            'Prùmìrná doba jízdy ', '\sigma(doby jízdy) ', ...
            'Prùmìrné zpoždìní ',  '\sigma(zpoždìní) ', ...
            'Prùmìrná rychlost ',    '\sigma(rychlosti) ', ...
            'Hustota vozidel ', ...
            'Prùmìrná doba zastavení ',   '\sigma(doby zastavení) ', ...
            'Poèet zastavení ', ...
            'Prùmìrná fronta ', 'Maximální fronta ' };
        statFieldUnits = { ...
            '[voz/h]', ...
            '[s]', '[s]', ...
            '[s]', '[s]', ...
            '[km/h]', '[km/h]', ...
            '[voz/km]', ...
            '[s]', '[s]', ...
            '[-]', ...
            '[voz]', '[voz]'
            };
    else
        error ( 'vgs:langerror', ...
            'Wrong language code specified. Only "en" or "cs" allowed.' );
    end
    
    % Just type and language specified. In that case the type of the graph has
    % to correspond to some of the predefined graph types.
    if nargin == 2
        if strcmp ( type, 'system' ) || strcmp ( type, 'globsection' )
            % System-wide and global data do not contain queue lengths
            sfn = statFieldNames(1:end-2);
            sfd = statFieldDesc(1:end-2);
            sfl = statFieldYLabels(1:end-2);
            sfu = statFieldUnits(1:end-2);
        elseif strcmp ( type, 'section' ) || strcmp ( type, 'intersection' )
            sfn = statFieldNames;
            sfd = statFieldDesc;
            sfl = statFieldYLabels;
            sfu = statFieldUnits;
        else
            error ( 'vgs:argerror', [ ...
                'Wrong type of graph specified. ' ...
                'Only one of "system", "section" or "intersection" is allowed.' ]);
        end
        
        % No matcPos
        mp = [];
        
    % Also area description passed as parameter. The type shall correspond
    % to something stored within the area descriptor.
    else
        % Find a match for the legend and graph type
        matchPos = strmatch ( ...
            type, ...
            areaDescriptor.Area.aggregationInfo.infoCode, ...
            'exact' );
        % If there is no match, the type string is invalid for the given
        % areaDescriptor.
        if isempty ( matchPos )
            % List the valid graph type codes
            codeList = '';
            for i = 1:length(areaDescriptor.Area.aggregationInfo.infoCode)
                if i > 1
                    codeList = [ codeList ', ' ]; %#ok<AGROW>
                end
                codeList = [ codeList '"' ...
                    areaDescriptor.Area.aggregationInfo.infoCode{i} '"' ]; %#ok<AGROW>
            end
            error ( 'vgs:argerror', [ ...
                'Wrong type of custom legend. ' ...
                'Only one of %s is allowed for this network.' ], ...
                codeList );
        else
            % There was a match. Fetch the index list of fields that will
            % be displayed in graphs for this type
            seList = areaDescriptor.Area.aggregationInfo.statEntries{matchPos};
            sfn = statFieldNames(seList);
            sfd = statFieldDesc(seList);
            sfl = statFieldYLabels(seList);
            sfu = statFieldUnits(seList);            
        end
        
        % Return the position of the match
        mp = matchPos;
        
    end
    
% ----- END ( vgsGetLegend ) -----
